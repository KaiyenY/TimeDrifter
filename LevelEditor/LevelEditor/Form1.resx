<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFRUQBRUVEAUVFRAFFR
        UQtRUVEgUVFRIFFRUQtRUVEAUVFRAFFRUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRUVEAUVFRAFBQ
        UANRUVFTUVFRuVFRUd9RUVHfUVFRulFRUVVRUVEDUVFRAFFRUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFR
        UQBRUVEAUVFRYFFRUfRRUVH5UVFR0VFRUdFRUVH6UVFR9VFRUWNRUVEAUVFRAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAUVFRAFFRURlRUVHUUVFR9VFRUWNRUVEQUVFREFFRUWdRUVH3UVFR11FRURtRUVEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABRUVEAUVFRQFFRUflRUVHAUVFRCVFRUQBRUVEAUVFRClFRUcRRUVH7UVFRQ1FR
        UQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFRUQBRUVFUUVFR/1FRUaZRUVEBUVFRAFFRUQBRUVECUVFRqlFR
        Uf9RUVFYUVFRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRUVEAUVFRAFFRUWVRUVH/UVFRklFRUQBRUVEAUFBQAFJS
        UgBRUVGXUVFR/1FRUWpRUVEAUFBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBQUABRUVEAUVFReFFRUf9RUVF+UVFRAFFR
        UQBRUVEAUVFRAFFRUYJRUVH/UVFRfFFRUQBOTk4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUVFRAFFRUQBRUVGLUVFR/1FR
        UWlRUVEAUVFRAFFRUQBRUVEAUVFRblFRUf9RUVGPUVFRAFBQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRUVEAVlZWAFFR
        UZ5RUVH/UVFRVVFRUQAAAAAAU1NTAFFRUQBRUVFaUVFR/1FRUaJPT08BUFBQAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFR
        UQBRUVEEUVFRsFFRUftRUVFDUVFRAAAAAAAAAAAAUVFRAFFRUUdRUVH9UVFRs1FRUQVRUVEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAUVFRAFFRUQlRUVHBUVFR81FRUTJRUVEAAAAAAAAAAABRUVEAUVFRNlFRUfVRUVHEUVFRC1FR
        UQBFRUUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABQUFAAUVFRAFFRUQBRUVEAUVFRD1FRUdBRUVHoUVFRJFFRUQAAAAAAAAAAAFFRUQBRUVEnUVFR6lFR
        UdNRUVERUVFRAFFRUQBRUVEAUFBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE5O
        TgBRUVEAUVFRAFFRUQBRUVEAUVFRCFFRUTVRUVGHUVFR9FFRUdtRUVEYUVFRAAAAAAAAAAAAUVFRAFFR
        URtRUVHeUVFR9VFRUYlRUVE2UVFRCVFRUQBRUVEAUVFRAFFRUQBRUVEAAAAAAAAAAAAAAAAAAAAAAAAA
        AABRUVEAUVFRAFFRUQBNTU0AUVFRIlFRUWZRUVG1UVFR71FRUf9RUVH6UVFRqVFRUQtRUVEAAAAAAAAA
        AABRUVEAUVFRDFFRUa1RUVH7UVFR/1FRUfBRUVG3UVFRZ1FRUSNQUFABUVFRAFFRUQBQUFAAAAAAAAAA
        AAAAAAAAAAAAAFFRUQBRUVEAUVFRFlFRUYdRUVHfUVFR/1FRUf9RUVHiUVFRnlFRUU1RUVESUVFRAFFR
        UQAAAAAAAAAAAFFRUQBSUlIAUVFRE1FRUU5RUVGfUVFR41FRUf9RUVH/UVFR4FFRUYhRUVEXUVFRAFFR
        UQAAAAAAAAAAAAAAAABQUFAAUVFRAFFRURJRUVGsUVFR/1FRUfZRUVG8UVFRa1FRUSVRUVECUVFRAFFR
        UQBRUVEAUVFRAAAAAAAAAAAAUVFRAFRUVABRUVEAUVFRAFBQUAJRUVElUVFRbFFRUbxRUVH2UVFR/1FR
        Ua1RUVESUVFRAFBQUAAAAAAAAAAAAFBQUABRUVEAUVFRcVFRUf9RUVHZUVFRTFFRUQhRUVEAUVFRAFFR
        UQBRUVEAUVFRAFFRUQBRUVEAUVFRAFFRUQBRUVEAUVFRAFFRUQBRUVEAUVFRAFFRUQBRUVEAUVFRCFFR
        UUxRUVHZUVFR/1FRUXJRUVEAUFBQAAAAAAAAAAAAUVFRAFFRUQxRUVHDUVFR/1FRUXZRUVEaUVFRHlFR
        UR9RUVEfUVFRH1FRUR9RUVEfUVFRH1FRUR9RUVEfUVFRH1FRUR9RUVEfUVFRH1FRUR9RUVEfUVFRH1FR
        UR9RUVEeUVFRGlFRUXdRUVH/UVFRw1FRUQxRUVEAAAAAAAAAAABRUVEAUVFRHFFRUd5RUVH/UVFR51FR
        UeJRUVHiUVFR4lFRUeJRUVHiUVFR4lFRUeJRUVHiUVFR4lFRUeJRUVHiUVFR4lFRUeJRUVHiUVFR4lFR
        UeJRUVHiUVFR4lFRUeJRUVHiUVFR6FFRUf9RUVHeUVFRHFFRUQAAAAAAAAAAAFFRUQBRUVEfUVFR4VFR
        Uf1RUVHmUVFR4lFRUeJRUVHiUVFR4lFRUeJRUVHiUVFR4lFRUeJRUVHiUVFR4lFRUeJRUVHiUVFR4lFR
        UeJRUVHiUVFR4lFRUeJRUVHiUVFR4lFRUeJRUVHmUVFR/VFRUeFRUVEfUVFRAAAAAAAAAAAAUVFRAFFR
        UR9RUVHiUVFR5lFRUTpRUVEdUVFRH1FRUR9RUVEfUVFRH1FRUR9RUVEfUVFRH1FRUR9RUVEfUVFRH1FR
        UR9RUVEfUVFRH1FRUR9RUVEfUVFRH1FRUR9RUVEfUVFRHVFRUTpRUVHmUVFR4lFRUR9RUVEAAAAAAAAA
        AABRUVEAUVFRH1FRUeJRUVHiUVFRHVFRUQBRUVEAUVFRAFFRUQBRUVEAUVFRAFFRUQBRUVEAUVFRAFFR
        UQBRUVEAUVFRAFFRUQBRUVEAUVFRAFFRUQBRUVEAUVFRAFFRUQBRUVEAUVFRHVFRUeJRUVHiUVFRH1FR
        UQAAAAAAAAAAAFFRUQBRUVEfUVFR4lFRUeJRUVEfUVFRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFRUQBRUVEfUVFR4lFR
        UeJRUVEfUVFRAAAAAAAAAAAAUVFRAFFRUR9RUVHiUVFR4lFRUR9RUVEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUVFRAFFR
        UR9RUVHiUVFR4lFRUR9RUVEAAAAAAAAAAABRUVEAUVFRH1FRUeJRUVHiUVFRH1FRUQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABRUVEAUVFRH1FRUeJRUVHiUVFRH1FRUQAAAAAAAAAAAFFRUQBRUVEfUVFR4lFRUeJRUVEfUVFRAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFFRUQBRUVEfUVFR4lFRUeJRUVEfUVFRAAAAAAAAAAAAUVFRAFFRUR9RUVHiUVFR4lFR
        UR1RUVEAUVFRAFFRUQBRUVEAUVFRAFFRUQBRUVEAUVFRAFFRUQBRUVEAUVFRAFFRUQBRUVEAUVFRAFFR
        UQBRUVEAUVFRAFFRUQBRUVEAUVFRAFFRUR1RUVHiUVFR4lFRUR9RUVEAAAAAAAAAAABRUVEAUVFRH1FR
        UeJRUVHmUVFROlFRUR1RUVEfUVFRH1FRUR9RUVEfUVFRH1FRUR9RUVEfUVFRH1FRUR9RUVEfUVFRH1FR
        UR9RUVEfUVFRH1FRUR9RUVEfUVFRH1FRUR9RUVEdUVFROlFRUeZRUVHiUVFRH1FRUQAAAAAAAAAAAFFR
        UQBRUVEfUVFR4lFRUf9RUVHmUVFR4lFRUeJRUVHiUVFR4lFRUeJRUVHiUVFR4lFRUeJRUVHiUVFR4lFR
        UeJRUVHiUVFR4lFRUeJRUVHiUVFR4lFRUeJRUVHiUVFR4lFRUeJRUVHmUVFR/1FRUeJRUVEfUVFRAAAA
        AAAAAAAAUVFRAFFRURtRUVHEUVFR4VFRUeBRUVHhUVFR4VFRUeFRUVHhUVFR4VFRUeFRUVHhUVFR4VFR
        UeFRUVHhUVFR4VFRUeFRUVHhUVFR4VFRUeFRUVHhUVFR4VFRUeFRUVHhUVFR4VFRUeBRUVHhUVFRxFFR
        URtRUVEAAAAAAAAAAABRUVEAUVFRBFFRUR9RUVEjUVFRI1FRUSNRUVEjUVFRI1FRUSNRUVEjUVFRI1FR
        USNRUVEjUVFRI1FRUSNRUVEjUVFRI1FRUSNRUVEjUVFRI1FRUSNRUVEjUVFRI1FRUSNRUVEjUVFRI1FR
        USNRUVEfUVFRBFFRUQAAAAAA/+AH///AA///wAP//8AD///AA///wAP//4AB//+AAf//gAH//4EB//+B
        gf//AYD//AGAP+ABgAfAAYADwAGAA4ABgAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGB//+Bgf//gYH/
        /4GB//+BgAAAAYAAAAGAAAABgAAAAYAAAAE=
</value>
  </data>
</root>